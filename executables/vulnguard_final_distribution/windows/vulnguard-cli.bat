@echo off
REM VulnGuard Command Line Interface
REM VulnGuard Security Platform v2.0

REM Check if Python is installed
python --version >nul 2>&1
if errorlevel 1 (
    echo.
    echo ERROR: Python is required but not installed.
    echo Please install Python 3.8+ from https://python.org
    echo.
    pause
    exit /b 1
)

REM Check and install dependencies
python -c "import requests" >nul 2>&1
if errorlevel 1 (
    echo Installing required dependencies...
    python -m pip install --quiet requests psutil pymongo fastapi uvicorn motor python-dotenv pydantic python-multipart
)

REM Get the directory where this script is located
set SCRIPT_DIR=%~dp0

REM Create temporary Python script
set TEMP_SCRIPT=%TEMP%\vulnguard_cli.py

REM Write the Python code to temp file (base64 encoded to handle special characters)
echo  > "%TEMP%\vulnguard_code.b64"
python -c "import base64; exec(base64.b64decode(open('%TEMP%\\vulnguard_code.b64').read().strip()).decode())" %*

REM Cleanup
if exist "%TEMP%\vulnguard_code.b64" del "%TEMP%\vulnguard_code.b64"
if exist "%TEMP_SCRIPT%" del "%TEMP_SCRIPT%"
